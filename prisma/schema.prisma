// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// Necessary for Next auth
// model Account {
//     id                       String  @id @default(cuid())
//     userId                   String
//     type                     String
//     provider                 String
//     providerAccountId        String
//     refresh_token            String? // @db.Text
//     access_token             String? // @db.Text
//     expires_at               Int?
//     token_type               String?
//     scope                    String?
//     id_token                 String? // @db.Text
//     session_state            String?
//     user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//     refresh_token_expires_in Int?

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model User {
  id            String    @id @default(cuid())
  email         String   @unique
  username      String   @unique
  name          String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // emailVerified DateTime?
  // image         String?
  // accounts      Account[]
  // posts         Post[]
  notes         Note[]
  image         UserImage?
  password      Password?
  roles         Role[]
  sessions      Session[]
}

model Note {
  id      String @id @default(cuid())

  title String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  @@index([ownerId])
  @@index([ownerId, updatedAt])
}

model UserImage {
  id String @id @default(cuid())
  altText String?
  contentType String
  blob Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model NoteImage {
  id String @id @default(cuid())
  altText String?
  contentType String
  blob Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  @@index([noteId])
}

model Password {
  hash String

  userId String @unique
  used User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Permission {
  id          String @id @default(cuid())
  action      String // create | read | update | delete
  entity      String // user | note
  access      String // own | any
  description String @default("")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  permissions Permission[]
  users       User[]
}

model Session {
  id          String @id @default(cuid())
  expirationDate     DateTime

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String

  @@index([userId])
}

model Verification {
  id          String @id @default(cuid())
  type        String    // email | phone
  target      String

  secret      String    // The secret key used to generate the otp
  algorithm   String    // The algorithm used to generate the otp
  digits      Int       // The number of digits in the otp
  period      Int       // The number of seconds the otp is valid for
  charSet     String    // The character set used to generate the otp
  expiresAt   DateTime? // - When it's safe to delete this verification

  createdAt  DateTime @default(now())

  @@unique([type, target])
}
